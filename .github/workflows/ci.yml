name: Continuous Integration

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main

jobs:
  build_push:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 1: Build the Project with Maven
      - name: Maven Build
        run: mvn clean package

      # Step 2: Run Tests & Upload Test Results
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            target/surefire-reports/*.xml

      # Step 3: CodeQL Analysis (After Compilation)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Build with CodeQL
        run: mvn clean compile

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: sarif-results

      # Step 4: Upload CodeQL SARIF Results as Artifact
      - name: Upload CodeQL Analysis Results
        uses: actions/upload-artifact@v4
        with:
          name: codeql-analysis-results
          path: sarif-results

     

          

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        with:
          version: '2.7.0'
      - name: Configure JFrog CLI
        run: |
            jfrog config add artifactory-server \
              --url="${{ secrets.JFROG_URL }}" \
              --user="${{ secrets.JFROG_USERNAME }}" \
              --password="${{ secrets.JFROG_PASSWORD }}" \
              --interactive=false

      - name: Upload JAR to Artifactory
        run: jfrog rt upload "target/*.jar" "my-repo/my-app/"
  

      # Step 6: Docker Setup
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.USER_NAME }}
          password: ${{ secrets.PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: sadik8143/spc:1.0

      # Step 7: Trivy Security Scan (After Image is Pushed)
      - name: Run Trivy Scan
        id: trivy_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sadik8143/spc:1.0'
          format: 'json'
          output: trivy-results.json
          exit-code: '1'
          ignore-unfixed: false
          severity: 'HIGH,CRITICAL'
          continue-on-error: true

      - name: Upload Trivy Scan Results
        if: steps.trivy_scan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: trivy-results.json
